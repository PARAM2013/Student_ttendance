@using Student_Attendance.ViewModels
@using Student_Attendance.Models
@model Student_Attendance.ViewModels.StudentViewModel

@{
    ViewData["Title"] = "Add Student";
}

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Add New Student</h4>
        </div>
        <div class="card-body">
            <div id="alert-container"></div>
            <form id="createStudentForm" asp-action="Create">
                <div asp-validation-summary="All" class="text-danger"></div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="EnrollmentNo" class="form-label"></label>
                            <input asp-for="EnrollmentNo" class="form-control" />
                            <span asp-validation-for="EnrollmentNo" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Name" class="form-label"></label>
                            <input asp-for="Name" class="form-control" />
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Cast" class="form-label"></label>
                            <input asp-for="Cast" class="form-control" />
                            <span asp-validation-for="Cast" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Email" class="form-label"></label>
                            <input asp-for="Email" class="form-control" />
                            <span asp-validation-for="Email" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Mobile" class="form-label"></label>
                            <input asp-for="Mobile" class="form-control" />
                            <span asp-validation-for="Mobile" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="CourseId" class="form-label"></label>
                            <select asp-for="CourseId" class="form-select" asp-items="@Model.Courses">
                                <option value="">Select Course</option>
                            </select>
                            <span asp-validation-for="CourseId" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Semester" class="form-label"></label>
                            <input asp-for="Semester" class="form-control" />
                            <span asp-validation-for="Semester" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="AcademicYearId" class="form-label"></label>
                            <select asp-for="AcademicYearId" class="form-select" asp-items="@Model.AcademicYears">
                                <option value="">Select Academic Year</option>
                            </select>
                            <span asp-validation-for="AcademicYearId" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="ClassId" class="form-label">Class</label>
                            <select asp-for="ClassId" class="form-select" asp-items="@Model.Classes">
                                <option value="">Select Class</option>
                            </select>
                            <span asp-validation-for="ClassId" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="DivisionId" class="form-label">Division</label>
                            <select asp-for="DivisionId" class="form-select" disabled>
                                <option value="">Select Class First</option>
                            </select>
                            <span asp-validation-for="DivisionId" class="text-danger"></span>
                        </div>
                        <div class="mb-3 form-check">
                            <input class="form-check-input" asp-for="IsActive" />
                            <label class="form-check-label" asp-for="IsActive"></label>
                        </div>
                    </div>
                </div>
                <div id="subjectsList" class="mt-3"></div>
                <div class="mt-3">
                    <button type="submit" class="btn btn-primary">Create Student</button>
                    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            // Handle Course change to update Classes
            $('#CourseId').change(function() {
                var courseId = $(this).val();
                var classDropdown = $('#ClassId');
                var divisionDropdown = $('#DivisionId');
                
                // Reset and disable Class dropdown
                classDropdown.html('<option value="">Select Course First</option>');
                classDropdown.prop('disabled', !courseId);
                
                // Reset and disable Division dropdown
                divisionDropdown.html('<option value="">Select Class First</option>');
                divisionDropdown.prop('disabled', true);
                
                if (courseId) {
                    // Get classes for selected course
                    $.get('@Url.Action("GetClassesByCourse", "Students")', { courseId: courseId }, function(data) {
                        classDropdown.empty();
                        classDropdown.append('<option value="">Select Class</option>');
                        $.each(data, function(i, item) {
                            classDropdown.append($('<option>').val(item.id).text(item.name));
                        });
                    });
                }
            });

            // Handle Class change to populate Divisions
            $('#ClassId').change(function() {
                var classId = $(this).val();
                var divisionDropdown = $('#DivisionId');
                
                // Reset and disable Division dropdown if no class is selected
                if (!classId) {
                    divisionDropdown.html('<option value="">Select Class First</option>');
                    divisionDropdown.prop('disabled', true);
                    return;
                }

                // Get divisions for selected class
                $.get('@Url.Action("GetDivisionsByClass")', { classId: classId }, function(data) {
                    divisionDropdown.empty();
                    divisionDropdown.append('<option value="">Select Division</option>');
                    $.each(data, function(i, item) {
                        divisionDropdown.append($('<option>').val(item.value).text(item.text));
                    });
                    divisionDropdown.prop('disabled', false);
                });
            });

            // Function to load subjects when class or semester changes
            function loadSubjects() {
                var classId = $('#ClassId').val();
                var semester = $('#Semester').val();
                
                if (classId && semester) {
                    $.get('@Url.Action("GetSubjectsForClass")', { classId: classId, semester: semester }, 
                        function(response) {
                            if (response.success && response.subjects.length > 0) {
                                var subjectList = response.subjects.map(function(subject) {
                                    return `<li class="list-group-item">
                                        ${subject.name} (${subject.code})
                                    </li>`;
                                }).join('');
                                
                                $('#subjectsList').html(`
                                    <div class="alert alert-info">
                                        <h6>Subjects that will be mapped:</h6>
                                        <ul class="list-group">
                                            ${subjectList}
                                        </ul>
                                    </div>`);
                            } else {
                                $('#subjectsList').html(`
                                    <div class="alert alert-warning">
                                        No subjects found for this class and semester
                                    </div>`);
                            }
                        });
                }
            }

            // Call loadSubjects when class or semester changes
            $('#ClassId, #Semester').change(function() {
                loadSubjects();
            });

            // Handle form submission
            $('#createStudentForm').on('submit', function (e) {
                e.preventDefault();
                if ($(this).valid()) {
                    submitForm(this);
                }
            });
        });

        function submitForm(form) {
            var formData = $(form).serializeArray();
            
            $.ajax({
                type: "POST",
                url: form.action,
                data: formData,
                success: function (response) {
                    if (response.success) {
                        showAlert(response.message, "success");
                        setTimeout(function() {
                            window.location.href = '@Url.Action("Index", "Students")';
                        }, 1500);
                    } else {
                        showAlert(response.message, "danger");
                        if (response.errors && response.errors.length > 0) {
                            response.errors.forEach(function(error) {
                                showAlert(error, "danger");
                            });
                        }
                        // Log the full response for debugging
                        console.log('Error Response:', response);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                    var errorMessage = "An error occurred while saving.";
                    try {
                        var response = JSON.parse(xhr.responseText);
                        if (response.message) {
                            errorMessage = response.message;
                        }
                    } catch (e) {
                        console.error('Error parsing response:', e);
                    }
                    showAlert(errorMessage, "danger");
                }
            });
        }

        function showAlert(message, type) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>`;

            $("#alert-container").html(alertHtml);

            // Don't auto-hide error messages
            if (type !== "danger") {
                setTimeout(function() {
                    $('.alert').fadeOut('slow', function() {
                        $(this).remove();
                    });
                }, 5000);
            }
        }
    </script>
}